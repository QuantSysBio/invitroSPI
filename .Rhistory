### INPUT ###
# load sample list
sample_list = read.csv(file = "INPUT/sample_list.csv",
sep = ";", header = T, stringsAsFactors = F)
setwd("../")
### INPUT ###
# load sample list
sample_list = read.csv(file = "INPUT/sample_list.csv",
sep = ";", header = T, stringsAsFactors = F)
library(dplyr)
library(seqinr)
source("SOURCE/SplicingFunctions_Reduced_trans.r")
print("-----------------------------------------------------")
print("COMPUTE ALL POSSIBLE SPLICED AND NON SPLICED PEPTIDES")
print("-----------------------------------------------------")
### INPUT ###
# load sample list
sample_list = read.csv(file = "INPUT/sample_list.csv",
sep = ";", header = T, stringsAsFactors = F)
# load config table
config = read.table("INPUT/config.yaml")
project_name = config[,2][which(config[,1] == "project_name:")] %>%
as.character()
# filter sample list
sample_list = sample_list[sample_list$project_name == project_name, ]
substrates = sample_list[, c("substrateID", "substrateSeq")] %>%
unique()
pept = 1
grep(pattern = ".fasta", substrates$substrateSeq[pept])
grepl(pattern = ".fasta", substrates$substrateSeq[pept])
grepl(pattern = ".fasta", substrates$substrateSeq[2])
cntSeq = read.fasta(file = paste0("INPUT/sequences/", substrates$substrateSeq[pept]),
seqtype = "AA", strip.desc = T)
View(cntSeq)
read.fasta(file = paste0("INPUT/sequences/", substrates$substrateSeq[pept]),
seqtype = "AA", strip.desc = T) %>%
unlist()
}
cntSeq = read.fasta(file = paste0("INPUT/sequences/", substrates$substrateSeq[pept]),
seqtype = "AA", strip.desc = T) %>%
unlist()
cntSeq2 = substrates$substrateSeq[2] %>% strsplit("") %>% unlist()
cntSeq2 = substrates$substrateSeq[3] %>% strsplit("") %>% unlist()
cntSeq == cntSeq2
